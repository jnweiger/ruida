#!/usr/bin/ruby
#
# lookuptable.rb
#
# Generate lookuptable for RD scrambling/unscrambling
#
# Usage:
#   lookuptable.rb [--ruby][--markdown] <magic> # Generate lookuptable
#   magic is a 2-digit hex value
#   defaults to --markdown and magic 88 (Model 320, 633x, 644xg, 644xs, 654xs)
#   use magic 61 for Model 634xg


$:.push(File.join(File.dirname(__FILE__), '..', 'lib'))
require 'ruida'
require 'scanf'
as_reverse = false
as_ruby = false
as_java = false
as_markdown = true # markdown is default
magic = nil

loop do
  break if ARGV.empty?
  arg = ARGV.shift
  case arg
  when "--reverse"
    as_reverse = true
    next
  when "--ruby"
    as_ruby = true
    as_markdown = false
    next
  when "--java"
    as_java = true
    as_markdown = false
    next
  when "--markdown"
    as_ruby = false
    as_markdown = true
    next
  else
    magic = arg.scanf("%02x").shift
    STDERR.puts "Using magic 0x%02x" % magic
  end
  rd = Ruida::Data.new magic
  lookuptable = rd.lookuptable
  if as_reverse
    reversetable = {}
    lookuptable.each do |k,v|
      reversetable[v] = k
    end
    lookuptable = reversetable
  end
  if as_ruby
    print "{ "
    lookuptable.each do |k,v|
      printf "0x%02x=>0x%02x, ", k, v
    end
    puts "}"
  end
  if as_java
    print "byte[] "
    print (as_reverse) ? "encode_table" : "decode_table"
    print " = {"
    (0..255).each do |k|
      puts if k % 16 == 0
      v = lookuptable[k]
      print "(byte)" if v > 127
      printf "0x%02x, ", v
    end
    puts "};"
  end
  if as_markdown
    # header
    puts "<table>\n<tr><th></th>"
    for col in (0..15) do
      printf "<th>%1x</th>", col
    end
    puts "</tr>"
    for row in (0..15) do
      print "<tr>"
      for col in (0..15) do
        if col == 0
          printf "<td>%1x</td>", row
        end
        printf "<td>%02x</td>", lookuptable[(row<<4) + col]
      end
      puts "</tr>"
    end
    puts "</table>"
  end
end

unless magic
  STDERR.puts "Usage: lookuptable [--ruby][--markdown] <magic>"
end
