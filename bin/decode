#!/usr/bin/ruby
#
# decode.rb
#
# Decode RD file
#
# Usage:
#   decode.rb                  # Reads from stdin
#   decode.rb [-88] <rd-file1> ...   # Reads from file(s)
#

$:.push(File.join(File.dirname(__FILE__), '..', 'lib'))
require 'ruida'

class Decoder
  def initialize path=nil, magic=nil
    @magic = magic
    if path
      raise "Empty path" if path.empty?
      @path = path
      @file = File.open(path, 'r')
      raise "Can't open #{path}" unless path
    else
      @file = STDIN
      STDERR.puts "Reading from stdin"
    end
    @file.binmode
  end
  
  def dump single_step_to=nil
    rd = Ruida::Data.new @file.read, @magic
    wr = nil
    if single_step_to
      wr = File.open single_step_to, 'wb'
      if wr
        wr.write rd.raw(0,3)
      else
        STDERR.puts "Can't open #{single_step_to}"
        exit 1
      end
    end
    parser = Ruida::Parser.new rd
    parser.each do |c|
      STDOUT.puts c
      if wr
        STDOUT.flush
        STDOUT.print("Step [%04x:#{c.length}]?" % c.pos)
        STDIN.gets
        wr.print c.raw
        wr.flush
#        c.raw.split("").each do |x|
#          STDOUT.print "%02x"%x.ord
#        end
#        STDOUT.puts
      end
    end
  end
end

arg = ARGV.shift
magic = nil
if arg == "-88"
  magic = 0x88
else
  ARGV.unshift arg
end
if ARGV.size == 0
  dis = Decoder.new nil, magic
  dis.dump
else
  single_step_to = nil
  loop do
    break if ARGV.empty?
    path = ARGV.shift
    if path == "-s" # single step
      single_step_to = ARGV.shift
      puts "Single step, output to #{single_step_to}"
      next
    end
    dis = Decoder.new path, magic
    dis.dump single_step_to
  end
end
